{"version":3,"sources":["jquery.bxslider.js"],"names":["$","defaults","mode","slideSelector","infiniteLoop","hideControlOnEnd","speed","easing","slideMargin","startSlide","randomStart","captions","ticker","tickerHover","adaptiveHeight","adaptiveHeightSpeed","video","useCSS","preloadImages","responsive","slideZIndex","wrapperClass","touchEnabled","swipeThreshold","oneToOneTouch","preventDefaultSwipeX","preventDefaultSwipeY","ariaLive","ariaHidden","keyboardEnabled","pager","pagerType","pagerShortSeparator","pagerSelector","buildPager","pagerCustom","controls","nextText","prevText","nextSelector","prevSelector","autoControls","startText","stopText","autoControlsCombine","autoControlsSelector","auto","pause","autoStart","autoDirection","stopAutoOnClick","autoHover","autoDelay","autoSlideForOnePage","minSlides","maxSlides","moveSlides","slideWidth","shrinkItems","onSliderLoad","onSlideBefore","onSlideAfter","onSlideNext","onSlidePrev","onSliderResize","fn","bxSlider","options","this","length","each","slider","el","windowWidth","window","width","windowHeight","height","data","init","settings","extend","parseInt","children","Math","floor","random","active","index","carousel","minThreshold","maxThreshold","working","interval","animProp","usingCSS","div","document","createElement","props","i","undefined","style","cssPrefix","replace","toLowerCase","attr","setup","preloadSelector","eq","wrap","viewport","parent","loader","prepend","css","position","overflow","maxWidth","getViewportMaxWidth","float","listStyle","getSlideWidth","zIndex","display","appendCaptions","last","getPagerQty","fitVids","appendControls","appendControlsAuto","appendPager","after","loadElements","start","selector","callback","total","find","count","one","complete","trigger","slice","sliceAppend","clone","addClass","slicePrepend","append","remove","setSlidePosition","getViewportHeight","redrawSlider","call","initialized","bind","resizeWindow","initAuto","initTicker","updatePagerActive","updateDirectionControls","initTouch","keydown","keyPress","currentIndex","getMoveBy","add","outerHeight","max","apply","map","get","parseFloat","newElWidth","wrapWidth","ceil","getNumberSlidesShowing","slidesShowing","childWidth","first","pagerQty","breakPoint","counter","lastChild","lastShowingIndex","setPositionProperty","left","outerWidth","top","value","type","duration","params","animateObj","propValue","e","target","is","unbind","updateAfterSlideTransition","resetValue","tickerLoop","animate","populatePager","pagerHtml","linkContent","isFunction","pagerEl","html","on","clickPagerBind","next","prev","clickNextBind","clickPrevBind","directionEl","stop","autoEl","clickStartBind","clickStopBind","updateAutoControls","title","preventDefault","hasClass","stopAuto","goToNextSlide","goToPrevSlide","startAuto","pagerLink","pagerIndex","currentTarget","goToSlide","slideIndex","len","removeClass","oldIndex","state","setTimeout","focus","blur","hover","autoPaused","transform","idx","ratio","property","newSpeed","totalDimens","startPosition","split","abs","resumeSpeed","animateProperty","reset","isOnScreen","win","scrollTop","scrollLeft","bounds","offset","right","bottom","activeElementTag","activeElement","tagName","RegExp","exec","keyCode","touch","x","y","end","onTouchStart","originalPos","orig","originalEvent","touchPoints","changedTouches","pageX","pageY","setPointerCapture","pointerId","onTouchMove","onTouchEnd","onPointerCancel","releasePointerCapture","xMovement","yMovement","change","distance","windowWidthNew","windowHeightNew","applyAriaHiddenAttributes","startVisibleIndex","numberOfSlidesShowing","setSlideIndex","direction","requestEl","performTransition","moveBy","filter","fadeOut","fadeIn","preventControlUpdate","setInterval","clearInterval","getCurrentSlide","getCurrentSlideElement","getSlideElement","getSlideCount","isWorking","destroySlider","removeAttr","unwrap","removeData","reloadSlider","jQuery"],"mappings":"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","file":"jquery.bxslider.js","sourcesContent":["/**\r\n * bxSlider v4.2.12\r\n * Copyright 2013-2015 Steven Wanderski\r\n * Written while drinking Belgian ales and listening to jazz\r\n * Licensed under MIT (http://opensource.org/licenses/MIT)\r\n */\r\n\r\n;(function ($) {\r\n\r\n    var defaults = {\r\n\r\n        // GENERAL\r\n        mode: 'horizontal',\r\n        slideSelector: '',\r\n        infiniteLoop: true,\r\n        hideControlOnEnd: false,\r\n        speed: 500,\r\n        easing: null,\r\n        slideMargin: 0,\r\n        startSlide: 0,\r\n        randomStart: false,\r\n        captions: false,\r\n        ticker: false,\r\n        tickerHover: false,\r\n        adaptiveHeight: false,\r\n        adaptiveHeightSpeed: 500,\r\n        video: false,\r\n        useCSS: true,\r\n        preloadImages: 'visible',\r\n        responsive: true,\r\n        slideZIndex: 50,\r\n        wrapperClass: 'bx-wrapper',\r\n\r\n        // TOUCH\r\n        touchEnabled: true,\r\n        swipeThreshold: 50,\r\n        oneToOneTouch: true,\r\n        preventDefaultSwipeX: true,\r\n        preventDefaultSwipeY: false,\r\n\r\n        // ACCESSIBILITY\r\n        ariaLive: true,\r\n        ariaHidden: true,\r\n\r\n        // KEYBOARD\r\n        keyboardEnabled: false,\r\n\r\n        // PAGER\r\n        pager: true,\r\n        pagerType: 'full',\r\n        pagerShortSeparator: ' / ',\r\n        pagerSelector: null,\r\n        buildPager: null,\r\n        pagerCustom: null,\r\n\r\n        // CONTROLS\r\n        controls: true,\r\n        nextText: 'Next',\r\n        prevText: 'Prev',\r\n        nextSelector: null,\r\n        prevSelector: null,\r\n        autoControls: false,\r\n        startText: 'Start',\r\n        stopText: 'Stop',\r\n        autoControlsCombine: false,\r\n        autoControlsSelector: null,\r\n\r\n        // AUTO\r\n        auto: false,\r\n        pause: 4000,\r\n        autoStart: true,\r\n        autoDirection: 'next',\r\n        stopAutoOnClick: false,\r\n        autoHover: false,\r\n        autoDelay: 0,\r\n        autoSlideForOnePage: false,\r\n\r\n        // CAROUSEL\r\n        minSlides: 1,\r\n        maxSlides: 1,\r\n        moveSlides: 0,\r\n        slideWidth: 0,\r\n        shrinkItems: false,\r\n\r\n        // CALLBACKS\r\n        onSliderLoad: function () {\r\n            return true;\r\n        },\r\n        onSlideBefore: function () {\r\n            return true;\r\n        },\r\n        onSlideAfter: function () {\r\n            return true;\r\n        },\r\n        onSlideNext: function () {\r\n            return true;\r\n        },\r\n        onSlidePrev: function () {\r\n            return true;\r\n        },\r\n        onSliderResize: function () {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    $.fn.bxSlider = function (options) {\r\n\r\n        if (this.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        // support multiple elements\r\n        if (this.length > 1) {\r\n            this.each(function () {\r\n                $(this).bxSlider(options);\r\n            });\r\n            return this;\r\n        }\r\n\r\n        // create a namespace to be used throughout the plugin\r\n        var slider = {},\r\n        // set a reference to our slider element\r\n            el = this,\r\n        // get the original window dimens (thanks a lot IE)\r\n            windowWidth = $(window).width(),\r\n            windowHeight = $(window).height();\r\n\r\n        // Return if slider is already initialized\r\n        if ($(el).data('bxSlider')) {\r\n            return;\r\n        }\r\n\r\n        /**\r\n         * ===================================================================================\r\n         * = PRIVATE FUNCTIONS\r\n         * ===================================================================================\r\n         */\r\n\r\n        /**\r\n         * Initializes namespace settings to be used throughout plugin\r\n         */\r\n        var init = function () {\r\n            // Return if slider is already initialized\r\n            if ($(el).data('bxSlider')) {\r\n                return;\r\n            }\r\n            // merge user-supplied options with the defaults\r\n            slider.settings = $.extend({}, defaults, options);\r\n            // parse slideWidth setting\r\n            slider.settings.slideWidth = parseInt(slider.settings.slideWidth);\r\n            // store the original children\r\n            slider.children = el.children(slider.settings.slideSelector);\r\n            // check if actual number of slides is less than minSlides / maxSlides\r\n            if (slider.children.length < slider.settings.minSlides) {\r\n                slider.settings.minSlides = slider.children.length;\r\n            }\r\n            if (slider.children.length < slider.settings.maxSlides) {\r\n                slider.settings.maxSlides = slider.children.length;\r\n            }\r\n            // if random start, set the startSlide setting to random number\r\n            if (slider.settings.randomStart) {\r\n                slider.settings.startSlide = Math.floor(Math.random() * slider.children.length);\r\n            }\r\n            // store active slide information\r\n            slider.active = {index: slider.settings.startSlide};\r\n            // store if the slider is in carousel mode (displaying / moving multiple slides)\r\n            slider.carousel = slider.settings.minSlides > 1 || slider.settings.maxSlides > 1 ? true : false;\r\n            // if carousel, force preloadImages = 'all'\r\n            if (slider.carousel) {\r\n                slider.settings.preloadImages = 'all';\r\n            }\r\n            // calculate the min / max width thresholds based on min / max number of slides\r\n            // used to setup and update carousel slides dimensions\r\n            slider.minThreshold = (slider.settings.minSlides * slider.settings.slideWidth) + ((slider.settings.minSlides - 1) * slider.settings.slideMargin);\r\n            slider.maxThreshold = (slider.settings.maxSlides * slider.settings.slideWidth) + ((slider.settings.maxSlides - 1) * slider.settings.slideMargin);\r\n            // store the current state of the slider (if currently animating, working is true)\r\n            slider.working = false;\r\n            // initialize the controls object\r\n            slider.controls = {};\r\n            // initialize an auto interval\r\n            slider.interval = null;\r\n            // determine which property to use for transitions\r\n            slider.animProp = slider.settings.mode === 'vertical' ? 'top' : 'left';\r\n            // determine if hardware acceleration can be used\r\n            slider.usingCSS = slider.settings.useCSS && slider.settings.mode !== 'fade' && (function () {\r\n                    // create our test div element\r\n                    var div = document.createElement('div'),\r\n                    // css transition properties\r\n                        props = ['WebkitPerspective', 'MozPerspective', 'OPerspective', 'msPerspective'];\r\n                    // test for each property\r\n                    for (var i = 0; i < props.length; i++) {\r\n                        if (div.style[props[i]] !== undefined) {\r\n                            slider.cssPrefix = props[i].replace('Perspective', '').toLowerCase();\r\n                            slider.animProp = '-' + slider.cssPrefix + '-transform';\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                }());\r\n            // if vertical mode always make maxSlides and minSlides equal\r\n            if (slider.settings.mode === 'vertical') {\r\n                slider.settings.maxSlides = slider.settings.minSlides;\r\n            }\r\n            // save original style data\r\n            el.data('origStyle', el.attr('style'));\r\n            el.children(slider.settings.slideSelector).each(function () {\r\n                $(this).data('origStyle', $(this).attr('style'));\r\n            });\r\n\r\n            // perform all DOM / CSS modifications\r\n            setup();\r\n        };\r\n\r\n        /**\r\n         * Performs all DOM and CSS modifications\r\n         */\r\n        var setup = function () {\r\n            var preloadSelector = slider.children.eq(slider.settings.startSlide); // set the default preload selector (visible)\r\n\r\n            // wrap el in a wrapper\r\n            el.wrap('<div class=\"' + slider.settings.wrapperClass + '\"><div class=\"bx-viewport\"></div></div>');\r\n            // store a namespace reference to .bx-viewport\r\n            slider.viewport = el.parent();\r\n\r\n            // add aria-live if the setting is enabled and ticker mode is disabled\r\n            if (slider.settings.ariaLive && !slider.settings.ticker) {\r\n                slider.viewport.attr('aria-live', 'polite');\r\n            }\r\n            // add a loading div to display while images are loading\r\n            slider.loader = $('<div class=\"bx-loading\" />');\r\n            slider.viewport.prepend(slider.loader);\r\n            // set el to a massive width, to hold any needed slides\r\n            // also strip any margin and padding from el\r\n            el.css({\r\n                width: slider.settings.mode === 'horizontal' ? (slider.children.length * 1000 + 215) + '%' : 'auto',\r\n                position: 'relative'\r\n            });\r\n            // if using CSS, add the easing property\r\n            if (slider.usingCSS && slider.settings.easing) {\r\n                el.css('-' + slider.cssPrefix + '-transition-timing-function', slider.settings.easing);\r\n                // if not using CSS and no easing value was supplied, use the default JS animation easing (swing)\r\n            } else if (!slider.settings.easing) {\r\n                slider.settings.easing = 'swing';\r\n            }\r\n            // make modifications to the viewport (.bx-viewport)\r\n            slider.viewport.css({\r\n                width: '100%',\r\n                overflow: 'hidden',\r\n                position: 'relative'\r\n            });\r\n            slider.viewport.parent().css({\r\n                maxWidth: getViewportMaxWidth()\r\n            });\r\n            // apply css to all slider children\r\n            slider.children.css({\r\n                float: slider.settings.mode === 'horizontal' ? 'left' : 'none',\r\n                listStyle: 'none',\r\n                position: 'relative'\r\n            });\r\n            // apply the calculated width after the float is applied to prevent scrollbar interference\r\n            slider.children.css('width', getSlideWidth());\r\n            // if slideMargin is supplied, add the css\r\n            if (slider.settings.mode === 'horizontal' && slider.settings.slideMargin > 0) {\r\n                slider.children.css('marginRight', slider.settings.slideMargin);\r\n            }\r\n            if (slider.settings.mode === 'vertical' && slider.settings.slideMargin > 0) {\r\n                slider.children.css('marginBottom', slider.settings.slideMargin);\r\n            }\r\n            // if \"fade\" mode, add positioning and z-index CSS\r\n            if (slider.settings.mode === 'fade') {\r\n                slider.children.css({\r\n                    position: 'absolute',\r\n                    zIndex: 0,\r\n                    display: 'none'\r\n                });\r\n                // prepare the z-index on the showing element\r\n                slider.children.eq(slider.settings.startSlide).css({\r\n                    zIndex: slider.settings.slideZIndex,\r\n                    display: 'flex'\r\n                });\r\n            }\r\n            // create an element to contain all slider controls (pager, start / stop, etc)\r\n            slider.controls.el = $('<div class=\"bx-controls\" />');\r\n            // if captions are requested, add them\r\n            if (slider.settings.captions) {\r\n                appendCaptions();\r\n            }\r\n            // check if startSlide is last slide\r\n            slider.active.last = slider.settings.startSlide === getPagerQty() - 1;\r\n            // if video is true, set up the fitVids plugin\r\n            if (slider.settings.video) {\r\n                el.fitVids();\r\n            }\r\n            if (slider.settings.preloadImages === 'all' || slider.settings.ticker) {\r\n                preloadSelector = slider.children;\r\n            }\r\n            // only check for control addition if not in \"ticker\" mode\r\n            if (!slider.settings.ticker) {\r\n                // if controls are requested, add them\r\n                if (slider.settings.controls) {\r\n                    appendControls();\r\n                }\r\n                // if auto is true, and auto controls are requested, add them\r\n                if (slider.settings.auto && slider.settings.autoControls) {\r\n                    appendControlsAuto();\r\n                }\r\n                // if pager is requested, add it\r\n                if (slider.settings.pager) {\r\n                    appendPager();\r\n                }\r\n                // if any control option is requested, add the controls wrapper\r\n                if (slider.settings.controls || slider.settings.autoControls || slider.settings.pager) {\r\n                    slider.viewport.after(slider.controls.el);\r\n                }\r\n                // if ticker mode, do not allow a pager\r\n            } else {\r\n                slider.settings.pager = false;\r\n            }\r\n            loadElements(preloadSelector, start);\r\n        };\r\n\r\n        var loadElements = function (selector, callback) {\r\n            var total = selector.find('img:not([src=\"\"]), iframe').length,\r\n                count = 0;\r\n            if (total === 0) {\r\n                callback();\r\n                return;\r\n            }\r\n            selector.find('img:not([src=\"\"]), iframe').each(function () {\r\n                $(this).one('load error', function () {\r\n                    if (++count === total) {\r\n                        callback();\r\n                    }\r\n                }).each(function () {\r\n                    if (this.complete) {\r\n                        $(this).trigger('load');\r\n                    }\r\n                });\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Start the slider\r\n         */\r\n        var start = function () {\r\n            // if infinite loop, prepare additional slides\r\n            if (slider.settings.infiniteLoop && slider.settings.mode !== 'fade' && !slider.settings.ticker) {\r\n                var slice = slider.settings.mode === 'vertical' ? slider.settings.minSlides : slider.settings.maxSlides,\r\n                    sliceAppend = slider.children.slice(0, slice).clone(true).addClass('bx-clone'),\r\n                    slicePrepend = slider.children.slice(-slice).clone(true).addClass('bx-clone');\r\n                if (slider.settings.ariaHidden) {\r\n                    sliceAppend.attr('aria-hidden', true);\r\n                    slicePrepend.attr('aria-hidden', true);\r\n                }\r\n                el.append(sliceAppend).prepend(slicePrepend);\r\n            }\r\n            // remove the loading DOM element\r\n            slider.loader.remove();\r\n            // set the left / top position of \"el\"\r\n            setSlidePosition();\r\n            // if \"vertical\" mode, always use adaptiveHeight to prevent odd behavior\r\n            if (slider.settings.mode === 'vertical') {\r\n                slider.settings.adaptiveHeight = true;\r\n            }\r\n            // set the viewport height\r\n            slider.viewport.height(getViewportHeight());\r\n            // make sure everything is positioned just right (same as a window resize)\r\n            el.redrawSlider();\r\n            // onSliderLoad callback\r\n            slider.settings.onSliderLoad.call(el, slider.active.index);\r\n            // slider has been fully initialized\r\n            slider.initialized = true;\r\n            // bind the resize call to the window\r\n            if (slider.settings.responsive) {\r\n                $(window).bind('resize', resizeWindow);\r\n            }\r\n            // if auto is true and has more than 1 page, start the show\r\n            if (slider.settings.auto && slider.settings.autoStart && (getPagerQty() > 1 || slider.settings.autoSlideForOnePage)) {\r\n                initAuto();\r\n            }\r\n            // if ticker is true, start the ticker\r\n            if (slider.settings.ticker) {\r\n                initTicker();\r\n            }\r\n            // if pager is requested, make the appropriate pager link active\r\n            if (slider.settings.pager) {\r\n                updatePagerActive(slider.settings.startSlide);\r\n            }\r\n            // check for any updates to the controls (like hideControlOnEnd updates)\r\n            if (slider.settings.controls) {\r\n                updateDirectionControls();\r\n            }\r\n            // if touchEnabled is true, setup the touch events\r\n            if (slider.settings.touchEnabled && !slider.settings.ticker) {\r\n                initTouch();\r\n            }\r\n            // if keyboardEnabled is true, setup the keyboard events\r\n            if (slider.settings.keyboardEnabled && !slider.settings.ticker) {\r\n                $(document).keydown(keyPress);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Returns the calculated height of the viewport, used to determine either adaptiveHeight or the maxHeight value\r\n         */\r\n        var getViewportHeight = function () {\r\n            var height = 0;\r\n            // first determine which children (slides) should be used in our height calculation\r\n            var children = $();\r\n            // if mode is not \"vertical\" and adaptiveHeight is false, include all children\r\n            if (slider.settings.mode !== 'vertical' && !slider.settings.adaptiveHeight) {\r\n                children = slider.children;\r\n            } else {\r\n                // if not carousel, return the single active child\r\n                if (!slider.carousel) {\r\n                    children = slider.children.eq(slider.active.index);\r\n                    // if carousel, return a slice of children\r\n                } else {\r\n                    // get the individual slide index\r\n                    var currentIndex = slider.settings.moveSlides === 1 ? slider.active.index : slider.active.index * getMoveBy();\r\n                    // add the current slide to the children\r\n                    children = slider.children.eq(currentIndex);\r\n                    // cycle through the remaining \"showing\" slides\r\n                    for (i = 1; i <= slider.settings.maxSlides - 1; i++) {\r\n                        // if looped back to the start\r\n                        if (currentIndex + i >= slider.children.length) {\r\n                            children = children.add(slider.children.eq(i - 1));\r\n                        } else {\r\n                            children = children.add(slider.children.eq(currentIndex + i));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // if \"vertical\" mode, calculate the sum of the heights of the children\r\n            if (slider.settings.mode === 'vertical') {\r\n                children.each(function (index) {\r\n                    height += $(this).outerHeight();\r\n                });\r\n                // add user-supplied margins\r\n                if (slider.settings.slideMargin > 0) {\r\n                    height += slider.settings.slideMargin * (slider.settings.minSlides - 1);\r\n                }\r\n                // if not \"vertical\" mode, calculate the max height of the children\r\n            } else {\r\n                height = Math.max.apply(Math, children.map(function () {\r\n                    return $(this).outerHeight(false);\r\n                }).get());\r\n            }\r\n\r\n            if (slider.viewport.css('box-sizing') === 'border-box') {\r\n                height += parseFloat(slider.viewport.css('padding-top')) + parseFloat(slider.viewport.css('padding-bottom')) +\r\n                    parseFloat(slider.viewport.css('border-top-width')) + parseFloat(slider.viewport.css('border-bottom-width'));\r\n            } else if (slider.viewport.css('box-sizing') === 'padding-box') {\r\n                height += parseFloat(slider.viewport.css('padding-top')) + parseFloat(slider.viewport.css('padding-bottom'));\r\n            }\r\n\r\n            return height;\r\n        };\r\n\r\n        /**\r\n         * Returns the calculated width to be used for the outer wrapper / viewport\r\n         */\r\n        var getViewportMaxWidth = function () {\r\n            var width = '100%';\r\n            if (slider.settings.slideWidth > 0) {\r\n                if (slider.settings.mode === 'horizontal') {\r\n                    width = (slider.settings.maxSlides * slider.settings.slideWidth) + ((slider.settings.maxSlides - 1) * slider.settings.slideMargin);\r\n                } else {\r\n                    width = slider.settings.slideWidth;\r\n                }\r\n            }\r\n            return width;\r\n        };\r\n\r\n        /**\r\n         * Returns the calculated width to be applied to each slide\r\n         */\r\n        var getSlideWidth = function () {\r\n            var newElWidth = slider.settings.slideWidth, // start with any user-supplied slide width\r\n                wrapWidth = slider.viewport.width();    // get the current viewport width\r\n            // if slide width was not supplied, or is larger than the viewport use the viewport width\r\n            if (slider.settings.slideWidth === 0 ||\r\n                (slider.settings.slideWidth > wrapWidth && !slider.carousel) ||\r\n                slider.settings.mode === 'vertical') {\r\n                newElWidth = wrapWidth;\r\n                // if carousel, use the thresholds to determine the width\r\n            } else if (slider.settings.maxSlides > 1 && slider.settings.mode === 'horizontal') {\r\n                if (wrapWidth > slider.maxThreshold) {\r\n                    return newElWidth;\r\n                } else if (wrapWidth < slider.minThreshold) {\r\n                    newElWidth = (wrapWidth - (slider.settings.slideMargin * (slider.settings.minSlides - 1))) / slider.settings.minSlides;\r\n                } else if (slider.settings.shrinkItems) {\r\n                    newElWidth = Math.floor((wrapWidth + slider.settings.slideMargin) / (Math.ceil((wrapWidth + slider.settings.slideMargin) / (newElWidth + slider.settings.slideMargin))) - slider.settings.slideMargin);\r\n                }\r\n            }\r\n            return newElWidth;\r\n        };\r\n\r\n        /**\r\n         * Returns the number of slides currently visible in the viewport (includes partially visible slides)\r\n         */\r\n        var getNumberSlidesShowing = function () {\r\n            var slidesShowing = 1,\r\n                childWidth = null;\r\n            if (slider.settings.mode === 'horizontal' && slider.settings.slideWidth > 0) {\r\n                // if viewport is smaller than minThreshold, return minSlides\r\n                if (slider.viewport.width() < slider.minThreshold) {\r\n                    slidesShowing = slider.settings.minSlides;\r\n                    // if viewport is larger than maxThreshold, return maxSlides\r\n                } else if (slider.viewport.width() > slider.maxThreshold) {\r\n                    slidesShowing = slider.settings.maxSlides;\r\n                    // if viewport is between min / max thresholds, divide viewport width by first child width\r\n                } else {\r\n                    childWidth = slider.children.first().width() + slider.settings.slideMargin;\r\n                    slidesShowing = Math.floor((slider.viewport.width() +\r\n                        slider.settings.slideMargin) / childWidth);\r\n                }\r\n                // if \"vertical\" mode, slides showing will always be minSlides\r\n            } else if (slider.settings.mode === 'vertical') {\r\n                slidesShowing = slider.settings.minSlides;\r\n            }\r\n            return slidesShowing;\r\n        };\r\n\r\n        /**\r\n         * Returns the number of pages (one full viewport of slides is one \"page\")\r\n         */\r\n        var getPagerQty = function () {\r\n            var pagerQty = 0,\r\n                breakPoint = 0,\r\n                counter = 0;\r\n            // if moveSlides is specified by the user\r\n            if (slider.settings.moveSlides > 0) {\r\n                if (slider.settings.infiniteLoop) {\r\n                    pagerQty = Math.ceil(slider.children.length / getMoveBy());\r\n                } else {\r\n                    // when breakpoint goes above children length, counter is the number of pages\r\n                    while (breakPoint < slider.children.length) {\r\n                        ++pagerQty;\r\n                        breakPoint = counter + getNumberSlidesShowing();\r\n                        counter += slider.settings.moveSlides <= getNumberSlidesShowing() ? slider.settings.moveSlides : getNumberSlidesShowing();\r\n                    }\r\n                }\r\n                // if moveSlides is 0 (auto) divide children length by sides showing, then round up\r\n            } else {\r\n                pagerQty = Math.ceil(slider.children.length / getNumberSlidesShowing());\r\n            }\r\n            return pagerQty;\r\n        };\r\n\r\n        /**\r\n         * Returns the number of individual slides by which to shift the slider\r\n         */\r\n        var getMoveBy = function () {\r\n            // if moveSlides was set by the user and moveSlides is less than number of slides showing\r\n            if (slider.settings.moveSlides > 0 && slider.settings.moveSlides <= getNumberSlidesShowing()) {\r\n                return slider.settings.moveSlides;\r\n            }\r\n            // if moveSlides is 0 (auto)\r\n            return getNumberSlidesShowing();\r\n        };\r\n\r\n        /**\r\n         * Sets the slider's (el) left or top position\r\n         */\r\n        var setSlidePosition = function () {\r\n            var position, lastChild, lastShowingIndex;\r\n            // if last slide, not infinite loop, and number of children is larger than specified maxSlides\r\n            if (slider.children.length > slider.settings.maxSlides && slider.active.last && !slider.settings.infiniteLoop) {\r\n                if (slider.settings.mode === 'horizontal') {\r\n                    // get the last child's position\r\n                    lastChild = slider.children.last();\r\n                    position = lastChild.position();\r\n                    // set the left position\r\n                    setPositionProperty(-(position.left - (slider.viewport.width() - lastChild.outerWidth())), 'reset', 0);\r\n                } else if (slider.settings.mode === 'vertical') {\r\n                    // get the last showing index's position\r\n                    lastShowingIndex = slider.children.length - slider.settings.minSlides;\r\n                    position = slider.children.eq(lastShowingIndex).position();\r\n                    // set the top position\r\n                    setPositionProperty(-position.top, 'reset', 0);\r\n                }\r\n                // if not last slide\r\n            } else {\r\n                // get the position of the first showing slide\r\n                position = slider.children.eq(slider.active.index * getMoveBy()).position();\r\n                // check for last slide\r\n                if (slider.active.index === getPagerQty() - 1) {\r\n                    slider.active.last = true;\r\n                }\r\n                // set the respective position\r\n                if (position !== undefined) {\r\n                    if (slider.settings.mode === 'horizontal') {\r\n                        setPositionProperty(-position.left, 'reset', 0);\r\n                    }\r\n                    else if (slider.settings.mode === 'vertical') {\r\n                        setPositionProperty(-position.top, 'reset', 0);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Sets the el's animating property position (which in turn will sometimes animate el).\r\n         * If using CSS, sets the transform property. If not using CSS, sets the top / left property.\r\n         *\r\n         * @param value (int)\r\n         *  - the animating property's value\r\n         *\r\n         * @param type (string) 'slide', 'reset', 'ticker'\r\n         *  - the type of instance for which the function is being\r\n         *\r\n         * @param duration (int)\r\n         *  - the amount of time (in ms) the transition should occupy\r\n         *\r\n         * @param params (array) optional\r\n         *  - an optional parameter containing any variables that need to be passed in\r\n         */\r\n        var setPositionProperty = function (value, type, duration, params) {\r\n            var animateObj, propValue;\r\n            // use CSS transform\r\n            if (slider.usingCSS) {\r\n                // determine the translate3d value\r\n                propValue = slider.settings.mode === 'vertical' ? 'translate3d(0, ' + value + 'px, 0)' : 'translate3d(' + value + 'px, 0, 0)';\r\n                // add the CSS transition-duration\r\n                el.css('-' + slider.cssPrefix + '-transition-duration', duration / 1000 + 's');\r\n                if (type === 'slide') {\r\n                    // set the property value\r\n                    el.css(slider.animProp, propValue);\r\n                    if (duration !== 0) {\r\n                        // bind a callback method - executes when CSS transition completes\r\n                        el.bind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function (e) {\r\n                            //make sure it's the correct one\r\n                            if (!$(e.target).is(el)) {\r\n                                return;\r\n                            }\r\n                            // unbind the callback\r\n                            el.unbind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd');\r\n                            updateAfterSlideTransition();\r\n                        });\r\n                    } else { //duration = 0\r\n                        updateAfterSlideTransition();\r\n                    }\r\n                } else if (type === 'reset') {\r\n                    el.css(slider.animProp, propValue);\r\n                } else if (type === 'ticker') {\r\n                    // make the transition use 'linear'\r\n                    el.css('-' + slider.cssPrefix + '-transition-timing-function', 'linear');\r\n                    el.css(slider.animProp, propValue);\r\n                    if (duration !== 0) {\r\n                        el.bind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function (e) {\r\n                            //make sure it's the correct one\r\n                            if (!$(e.target).is(el)) {\r\n                                return;\r\n                            }\r\n                            // unbind the callback\r\n                            el.unbind('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd');\r\n                            // reset the position\r\n                            setPositionProperty(params.resetValue, 'reset', 0);\r\n                            // start the loop again\r\n                            tickerLoop();\r\n                        });\r\n                    } else { //duration = 0\r\n                        setPositionProperty(params.resetValue, 'reset', 0);\r\n                        tickerLoop();\r\n                    }\r\n                }\r\n                // use JS animate\r\n            } else {\r\n                animateObj = {};\r\n                animateObj[slider.animProp] = value;\r\n                if (type === 'slide') {\r\n                    el.animate(animateObj, duration, slider.settings.easing, function () {\r\n                        updateAfterSlideTransition();\r\n                    });\r\n                } else if (type === 'reset') {\r\n                    el.css(slider.animProp, value);\r\n                } else if (type === 'ticker') {\r\n                    el.animate(animateObj, duration, 'linear', function () {\r\n                        setPositionProperty(params.resetValue, 'reset', 0);\r\n                        // run the recursive loop after animation\r\n                        tickerLoop();\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Populates the pager with proper amount of pages\r\n         */\r\n        var populatePager = function () {\r\n            var pagerHtml = '',\r\n                linkContent = '',\r\n                pagerQty = getPagerQty();\r\n            // loop through each pager item\r\n            for (var i = 0; i < pagerQty; i++) {\r\n                linkContent = '';\r\n                // if a buildPager function is supplied, use it to get pager link value, else use index + 1\r\n                if (slider.settings.buildPager && $.isFunction(slider.settings.buildPager) || slider.settings.pagerCustom) {\r\n                    linkContent = slider.settings.buildPager(i);\r\n                    slider.pagerEl.addClass('bx-custom-pager');\r\n                } else {\r\n                    linkContent = i + 1;\r\n                    slider.pagerEl.addClass('bx-default-pager');\r\n                }\r\n                // var linkContent = slider.settings.buildPager && $.isFunction(slider.settings.buildPager) ? slider.settings.buildPager(i) : i + 1;\r\n                // add the markup to the string\r\n                pagerHtml += '<div class=\"bx-pager-item\"><a href=\"\" data-slide-index=\"' + i + '\" class=\"bx-pager-link\">' + linkContent + '</a></div>';\r\n            }\r\n            // populate the pager element with pager links\r\n            slider.pagerEl.html(pagerHtml);\r\n        };\r\n\r\n        /**\r\n         * Appends the pager to the controls element\r\n         */\r\n        var appendPager = function () {\r\n            if (!slider.settings.pagerCustom) {\r\n                // create the pager DOM element\r\n                slider.pagerEl = $('<div class=\"bx-pager\" />');\r\n                // if a pager selector was supplied, populate it with the pager\r\n                if (slider.settings.pagerSelector) {\r\n                    $(slider.settings.pagerSelector).html(slider.pagerEl);\r\n                    // if no pager selector was supplied, add it after the wrapper\r\n                } else {\r\n                    slider.controls.el.addClass('bx-has-pager').append(slider.pagerEl);\r\n                }\r\n                // populate the pager\r\n                populatePager();\r\n            } else {\r\n                slider.pagerEl = $(slider.settings.pagerCustom);\r\n            }\r\n            // assign the pager click binding\r\n            slider.pagerEl.on('click touchend', 'a', clickPagerBind);\r\n        };\r\n\r\n        /**\r\n         * Appends prev / next controls to the controls element\r\n         */\r\n        var appendControls = function () {\r\n            slider.controls.next = $('<a class=\"bx-next\" href=\"\">' + slider.settings.nextText + '</a>');\r\n            slider.controls.prev = $('<a class=\"bx-prev\" href=\"\">' + slider.settings.prevText + '</a>');\r\n            // bind click actions to the controls\r\n            slider.controls.next.bind('click touchend', clickNextBind);\r\n            slider.controls.prev.bind('click touchend', clickPrevBind);\r\n            // if nextSelector was supplied, populate it\r\n            if (slider.settings.nextSelector) {\r\n                $(slider.settings.nextSelector).append(slider.controls.next);\r\n            }\r\n            // if prevSelector was supplied, populate it\r\n            if (slider.settings.prevSelector) {\r\n                $(slider.settings.prevSelector).append(slider.controls.prev);\r\n            }\r\n            // if no custom selectors were supplied\r\n            if (!slider.settings.nextSelector && !slider.settings.prevSelector) {\r\n                // add the controls to the DOM\r\n                slider.controls.directionEl = $('<div class=\"bx-controls-direction\" />');\r\n                // add the control elements to the directionEl\r\n                slider.controls.directionEl.append(slider.controls.prev).append(slider.controls.next);\r\n                // slider.viewport.append(slider.controls.directionEl);\r\n                slider.controls.el.addClass('bx-has-controls-direction').append(slider.controls.directionEl);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Appends start / stop auto controls to the controls element\r\n         */\r\n        var appendControlsAuto = function () {\r\n            slider.controls.start = $('<div class=\"bx-controls-auto-item\"><a class=\"bx-start\" href=\"\">' + slider.settings.startText + '</a></div>');\r\n            slider.controls.stop = $('<div class=\"bx-controls-auto-item\"><a class=\"bx-stop\" href=\"\">' + slider.settings.stopText + '</a></div>');\r\n            // add the controls to the DOM\r\n            slider.controls.autoEl = $('<div class=\"bx-controls-auto\" />');\r\n            // bind click actions to the controls\r\n            slider.controls.autoEl.on('click', '.bx-start', clickStartBind);\r\n            slider.controls.autoEl.on('click', '.bx-stop', clickStopBind);\r\n            // if autoControlsCombine, insert only the \"start\" control\r\n            if (slider.settings.autoControlsCombine) {\r\n                slider.controls.autoEl.append(slider.controls.start);\r\n                // if autoControlsCombine is false, insert both controls\r\n            } else {\r\n                slider.controls.autoEl.append(slider.controls.start).append(slider.controls.stop);\r\n            }\r\n            // if auto controls selector was supplied, populate it with the controls\r\n            if (slider.settings.autoControlsSelector) {\r\n                $(slider.settings.autoControlsSelector).html(slider.controls.autoEl);\r\n                // if auto controls selector was not supplied, add it after the wrapper\r\n            } else {\r\n                slider.controls.el.addClass('bx-has-controls-auto').append(slider.controls.autoEl);\r\n            }\r\n            // update the auto controls\r\n            updateAutoControls(slider.settings.autoStart ? 'stop' : 'start');\r\n        };\r\n\r\n        /**\r\n         * Appends image captions to the DOM\r\n         */\r\n        var appendCaptions = function () {\r\n            // cycle through each child\r\n            slider.children.each(function (index) {\r\n                // get the image title attribute\r\n                var title = $(this).find('img:first').attr('title');\r\n                // append the caption\r\n                if (title !== undefined && ('' + title).length) {\r\n                    $(this).append('<div class=\"bx-caption\"><span>' + title + '</span></div>');\r\n                }\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Click next binding\r\n         *\r\n         * @param e (event)\r\n         *  - DOM event object\r\n         */\r\n        var clickNextBind = function (e) {\r\n            e.preventDefault();\r\n            if (slider.controls.el.hasClass('disabled')) {\r\n                return;\r\n            }\r\n            // if auto show is running, stop it\r\n            if (slider.settings.auto && slider.settings.stopAutoOnClick) {\r\n                el.stopAuto();\r\n            }\r\n            el.goToNextSlide();\r\n        };\r\n\r\n        /**\r\n         * Click prev binding\r\n         *\r\n         * @param e (event)\r\n         *  - DOM event object\r\n         */\r\n        var clickPrevBind = function (e) {\r\n            e.preventDefault();\r\n            if (slider.controls.el.hasClass('disabled')) {\r\n                return;\r\n            }\r\n            // if auto show is running, stop it\r\n            if (slider.settings.auto && slider.settings.stopAutoOnClick) {\r\n                el.stopAuto();\r\n            }\r\n            el.goToPrevSlide();\r\n        };\r\n\r\n        /**\r\n         * Click start binding\r\n         *\r\n         * @param e (event)\r\n         *  - DOM event object\r\n         */\r\n        var clickStartBind = function (e) {\r\n            el.startAuto();\r\n            e.preventDefault();\r\n        };\r\n\r\n        /**\r\n         * Click stop binding\r\n         *\r\n         * @param e (event)\r\n         *  - DOM event object\r\n         */\r\n        var clickStopBind = function (e) {\r\n            el.stopAuto();\r\n            e.preventDefault();\r\n        };\r\n\r\n        /**\r\n         * Click pager binding\r\n         *\r\n         * @param e (event)\r\n         *  - DOM event object\r\n         */\r\n        var clickPagerBind = function (e) {\r\n            var pagerLink, pagerIndex;\r\n            e.preventDefault();\r\n            if (slider.controls.el.hasClass('disabled')) {\r\n                return;\r\n            }\r\n            // if auto show is running, stop it\r\n            if (slider.settings.auto && slider.settings.stopAutoOnClick) {\r\n                el.stopAuto();\r\n            }\r\n            pagerLink = $(e.currentTarget);\r\n            if (pagerLink.attr('data-slide-index') !== undefined) {\r\n                pagerIndex = parseInt(pagerLink.attr('data-slide-index'));\r\n                // if clicked pager link is not active, continue with the goToSlide call\r\n                if (pagerIndex !== slider.active.index) {\r\n                    el.goToSlide(pagerIndex);\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Updates the pager links with an active class\r\n         *\r\n         * @param slideIndex (int)\r\n         *  - index of slide to make active\r\n         */\r\n        var updatePagerActive = function (slideIndex) {\r\n            // if \"short\" pager type\r\n            var len = slider.children.length; // nb of children\r\n            if (slider.settings.pagerType === 'short') {\r\n                if (slider.settings.maxSlides > 1) {\r\n                    len = Math.ceil(slider.children.length / slider.settings.maxSlides);\r\n                }\r\n                slider.pagerEl.html((slideIndex + 1) + slider.settings.pagerShortSeparator + len);\r\n                return;\r\n            }\r\n            // remove all pager active classes\r\n            slider.pagerEl.find('a').removeClass('active');\r\n            // apply the active class for all pagers\r\n            slider.pagerEl.each(function (i, el) {\r\n                $(el).find('a').eq(slideIndex).addClass('active');\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Performs needed actions after a slide transition\r\n         */\r\n        var updateAfterSlideTransition = function () {\r\n            // if infinite loop is true\r\n            if (slider.settings.infiniteLoop) {\r\n                var position = '';\r\n                // first slide\r\n                if (slider.active.index === 0) {\r\n                    // set the new position\r\n                    position = slider.children.eq(0).position();\r\n                    // carousel, last slide\r\n                } else if (slider.active.index === getPagerQty() - 1 && slider.carousel) {\r\n                    position = slider.children.eq((getPagerQty() - 1) * getMoveBy()).position();\r\n                    // last slide\r\n                } else if (slider.active.index === slider.children.length - 1) {\r\n                    position = slider.children.eq(slider.children.length - 1).position();\r\n                }\r\n                if (position) {\r\n                    if (slider.settings.mode === 'horizontal') {\r\n                        setPositionProperty(-position.left, 'reset', 0);\r\n                    }\r\n                    else if (slider.settings.mode === 'vertical') {\r\n                        setPositionProperty(-position.top, 'reset', 0);\r\n                    }\r\n                }\r\n            }\r\n            // declare that the transition is complete\r\n            slider.working = false;\r\n            // onSlideAfter callback\r\n            slider.settings.onSlideAfter.call(el, slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);\r\n        };\r\n\r\n        /**\r\n         * Updates the auto controls state (either active, or combined switch)\r\n         *\r\n         * @param state (string) \"start\", \"stop\"\r\n         *  - the new state of the auto show\r\n         */\r\n        var updateAutoControls = function (state) {\r\n            // if autoControlsCombine is true, replace the current control with the new state\r\n            if (slider.settings.autoControlsCombine) {\r\n                slider.controls.autoEl.html(slider.controls[state]);\r\n                // if autoControlsCombine is false, apply the \"active\" class to the appropriate control\r\n            } else {\r\n                slider.controls.autoEl.find('a').removeClass('active');\r\n                slider.controls.autoEl.find('a:not(.bx-' + state + ')').addClass('active');\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Updates the direction controls (checks if either should be hidden)\r\n         */\r\n        var updateDirectionControls = function () {\r\n            if (getPagerQty() === 1) {\r\n                slider.controls.prev.addClass('disabled');\r\n                slider.controls.next.addClass('disabled');\r\n            } else if (!slider.settings.infiniteLoop && slider.settings.hideControlOnEnd) {\r\n                // if first slide\r\n                if (slider.active.index === 0) {\r\n                    slider.controls.prev.addClass('disabled');\r\n                    slider.controls.next.removeClass('disabled');\r\n                    // if last slide\r\n                } else if (slider.active.index === getPagerQty() - 1) {\r\n                    slider.controls.next.addClass('disabled');\r\n                    slider.controls.prev.removeClass('disabled');\r\n                    // if any slide in the middle\r\n                } else {\r\n                    slider.controls.prev.removeClass('disabled');\r\n                    slider.controls.next.removeClass('disabled');\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Initializes the auto process\r\n         */\r\n        var initAuto = function () {\r\n            // if autoDelay was supplied, launch the auto show using a setTimeout() call\r\n            if (slider.settings.autoDelay > 0) {\r\n                var timeout = setTimeout(el.startAuto, slider.settings.autoDelay);\r\n                // if autoDelay was not supplied, start the auto show normally\r\n            } else {\r\n                el.startAuto();\r\n\r\n                //add focus and blur events to ensure its running if timeout gets paused\r\n                $(window).focus(function () {\r\n                    el.startAuto();\r\n                }).blur(function () {\r\n                    el.stopAuto();\r\n                });\r\n            }\r\n            // if autoHover is requested\r\n            if (slider.settings.autoHover) {\r\n                // on el hover\r\n                el.hover(function () {\r\n                    // if the auto show is currently playing (has an active interval)\r\n                    if (slider.interval) {\r\n                        // stop the auto show and pass true argument which will prevent control update\r\n                        el.stopAuto(true);\r\n                        // create a new autoPaused value which will be used by the relative \"mouseout\" event\r\n                        slider.autoPaused = true;\r\n                    }\r\n                }, function () {\r\n                    // if the autoPaused value was created be the prior \"mouseover\" event\r\n                    if (slider.autoPaused) {\r\n                        // start the auto show and pass true argument which will prevent control update\r\n                        el.startAuto(true);\r\n                        // reset the autoPaused value\r\n                        slider.autoPaused = null;\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Initializes the ticker process\r\n         */\r\n        var initTicker = function () {\r\n            var startPosition = 0,\r\n                position, transform, value, idx, ratio, property, newSpeed, totalDimens;\r\n            // if autoDirection is \"next\", append a clone of the entire slider\r\n            if (slider.settings.autoDirection === 'next') {\r\n                el.append(slider.children.clone().addClass('bx-clone'));\r\n                // if autoDirection is \"prev\", prepend a clone of the entire slider, and set the left position\r\n            } else {\r\n                el.prepend(slider.children.clone().addClass('bx-clone'));\r\n                position = slider.children.first().position();\r\n                startPosition = slider.settings.mode === 'horizontal' ? -position.left : -position.top;\r\n            }\r\n            setPositionProperty(startPosition, 'reset', 0);\r\n            // do not allow controls in ticker mode\r\n            slider.settings.pager = false;\r\n            slider.settings.controls = false;\r\n            slider.settings.autoControls = false;\r\n            // if autoHover is requested\r\n            if (slider.settings.tickerHover) {\r\n                if (slider.usingCSS) {\r\n                    idx = slider.settings.mode === 'horizontal' ? 4 : 5;\r\n                    slider.viewport.hover(function () {\r\n                        transform = el.css('-' + slider.cssPrefix + '-transform');\r\n                        value = parseFloat(transform.split(',')[idx]);\r\n                        setPositionProperty(value, 'reset', 0);\r\n                    }, function () {\r\n                        totalDimens = 0;\r\n                        slider.children.each(function (index) {\r\n                            totalDimens += slider.settings.mode === 'horizontal' ? $(this).outerWidth(true) : $(this).outerHeight(true);\r\n                        });\r\n                        // calculate the speed ratio (used to determine the new speed to finish the paused animation)\r\n                        ratio = slider.settings.speed / totalDimens;\r\n                        // determine which property to use\r\n                        property = slider.settings.mode === 'horizontal' ? 'left' : 'top';\r\n                        // calculate the new speed\r\n                        newSpeed = ratio * (totalDimens - (Math.abs(parseInt(value))));\r\n                        tickerLoop(newSpeed);\r\n                    });\r\n                } else {\r\n                    // on el hover\r\n                    slider.viewport.hover(function () {\r\n                        el.stop();\r\n                    }, function () {\r\n                        // calculate the total width of children (used to calculate the speed ratio)\r\n                        totalDimens = 0;\r\n                        slider.children.each(function (index) {\r\n                            totalDimens += slider.settings.mode === 'horizontal' ? $(this).outerWidth(true) : $(this).outerHeight(true);\r\n                        });\r\n                        // calculate the speed ratio (used to determine the new speed to finish the paused animation)\r\n                        ratio = slider.settings.speed / totalDimens;\r\n                        // determine which property to use\r\n                        property = slider.settings.mode === 'horizontal' ? 'left' : 'top';\r\n                        // calculate the new speed\r\n                        newSpeed = ratio * (totalDimens - (Math.abs(parseInt(el.css(property)))));\r\n                        tickerLoop(newSpeed);\r\n                    });\r\n                }\r\n            }\r\n            // start the ticker loop\r\n            tickerLoop();\r\n        };\r\n\r\n        /**\r\n         * Runs a continuous loop, news ticker-style\r\n         */\r\n        var tickerLoop = function (resumeSpeed) {\r\n            var speed = resumeSpeed ? resumeSpeed : slider.settings.speed,\r\n                position = {left: 0, top: 0},\r\n                reset = {left: 0, top: 0},\r\n                animateProperty, resetValue, params;\r\n\r\n            // if \"next\" animate left position to last child, then reset left to 0\r\n            if (slider.settings.autoDirection === 'next') {\r\n                position = el.find('.bx-clone').first().position();\r\n                // if \"prev\" animate left position to 0, then reset left to first non-clone child\r\n            } else {\r\n                reset = slider.children.first().position();\r\n            }\r\n            animateProperty = slider.settings.mode === 'horizontal' ? -position.left : -position.top;\r\n            resetValue = slider.settings.mode === 'horizontal' ? -reset.left : -reset.top;\r\n            params = {resetValue: resetValue};\r\n            setPositionProperty(animateProperty, 'ticker', speed, params);\r\n        };\r\n\r\n        /**\r\n         * Check if el is on screen\r\n         */\r\n        var isOnScreen = function (el) {\r\n            var win = $(window),\r\n                viewport = {\r\n                    top: win.scrollTop(),\r\n                    left: win.scrollLeft()\r\n                },\r\n                bounds = el.offset();\r\n\r\n            viewport.right = viewport.left + win.width();\r\n            viewport.bottom = viewport.top + win.height();\r\n            bounds.right = bounds.left + el.outerWidth();\r\n            bounds.bottom = bounds.top + el.outerHeight();\r\n\r\n            return (!(viewport.right < bounds.left || viewport.left > bounds.right || viewport.bottom < bounds.top || viewport.top > bounds.bottom));\r\n        };\r\n\r\n        /**\r\n         * Initializes keyboard events\r\n         */\r\n        var keyPress = function (e) {\r\n            var activeElementTag = document.activeElement.tagName.toLowerCase(),\r\n                tagFilters = 'input|textarea',\r\n                p = new RegExp(activeElementTag, ['i']),\r\n                result = p.exec(tagFilters);\r\n\r\n            if (result == null && isOnScreen(el)) {\r\n                if (e.keyCode === 39) {\r\n                    clickNextBind(e);\r\n                    return false;\r\n                } else if (e.keyCode === 37) {\r\n                    clickPrevBind(e);\r\n                    return false;\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Initializes touch events\r\n         */\r\n        var initTouch = function () {\r\n            // initialize object to contain all touch values\r\n            slider.touch = {\r\n                start: {x: 0, y: 0},\r\n                end: {x: 0, y: 0}\r\n            };\r\n            slider.viewport.bind('touchstart MSPointerDown pointerdown', onTouchStart);\r\n\r\n            //for browsers that have implemented pointer events and fire a click after\r\n            //every pointerup regardless of whether pointerup is on same screen location as pointerdown or not\r\n            slider.viewport.on('click', '.bxslider a', function (e) {\r\n                if (slider.viewport.hasClass('click-disabled')) {\r\n                    e.preventDefault();\r\n                    slider.viewport.removeClass('click-disabled');\r\n                }\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Event handler for \"touchstart\"\r\n         *\r\n         * @param e (event)\r\n         *  - DOM event object\r\n         */\r\n        var onTouchStart = function (e) {\r\n            //disable slider controls while user is interacting with slides to avoid slider freeze that happens on touch devices when a slide swipe happens immediately after interacting with slider controls\r\n            slider.controls.el.addClass('disabled');\r\n\r\n            if (slider.working) {\r\n                e.preventDefault();\r\n                slider.controls.el.removeClass('disabled');\r\n            } else {\r\n                // record the original position when touch starts\r\n                slider.touch.originalPos = el.position();\r\n                var orig = e.originalEvent,\r\n                    touchPoints = (typeof orig.changedTouches !== 'undefined') ? orig.changedTouches : [orig];\r\n                // record the starting touch x, y coordinates\r\n                slider.touch.start.x = touchPoints[0].pageX;\r\n                slider.touch.start.y = touchPoints[0].pageY;\r\n\r\n                if (slider.viewport.get(0).setPointerCapture) {\r\n                    slider.pointerId = orig.pointerId;\r\n                    slider.viewport.get(0).setPointerCapture(slider.pointerId);\r\n                }\r\n                // bind a \"touchmove\" event to the viewport\r\n                slider.viewport.bind('touchmove MSPointerMove pointermove', onTouchMove);\r\n                // bind a \"touchend\" event to the viewport\r\n                slider.viewport.bind('touchend MSPointerUp pointerup', onTouchEnd);\r\n                slider.viewport.bind('MSPointerCancel pointercancel', onPointerCancel);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Cancel Pointer for Windows Phone\r\n         *\r\n         * @param e (event)\r\n         *  - DOM event object\r\n         */\r\n        var onPointerCancel = function (e) {\r\n            /* onPointerCancel handler is needed to deal with situations when a touchend\r\n             doesn't fire after a touchstart (this happens on windows phones only) */\r\n            setPositionProperty(slider.touch.originalPos.left, 'reset', 0);\r\n\r\n            //remove handlers\r\n            slider.controls.el.removeClass('disabled');\r\n            slider.viewport.unbind('MSPointerCancel pointercancel', onPointerCancel);\r\n            slider.viewport.unbind('touchmove MSPointerMove pointermove', onTouchMove);\r\n            slider.viewport.unbind('touchend MSPointerUp pointerup', onTouchEnd);\r\n            if (slider.viewport.get(0).releasePointerCapture) {\r\n                slider.viewport.get(0).releasePointerCapture(slider.pointerId);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Event handler for \"touchmove\"\r\n         *\r\n         * @param e (event)\r\n         *  - DOM event object\r\n         */\r\n        var onTouchMove = function (e) {\r\n            var orig = e.originalEvent,\r\n                touchPoints = (typeof orig.changedTouches !== 'undefined') ? orig.changedTouches : [orig],\r\n            // if scrolling on y axis, do not prevent default\r\n                xMovement = Math.abs(touchPoints[0].pageX - slider.touch.start.x),\r\n                yMovement = Math.abs(touchPoints[0].pageY - slider.touch.start.y),\r\n                value = 0,\r\n                change = 0;\r\n\r\n            // x axis swipe\r\n            if ((xMovement * 3) > yMovement && slider.settings.preventDefaultSwipeX) {\r\n                e.preventDefault();\r\n                // y axis swipe\r\n            } else if ((yMovement * 3) > xMovement && slider.settings.preventDefaultSwipeY) {\r\n                e.preventDefault();\r\n            }\r\n            if (slider.settings.mode !== 'fade' && slider.settings.oneToOneTouch) {\r\n                // if horizontal, drag along x axis\r\n                if (slider.settings.mode === 'horizontal') {\r\n                    change = touchPoints[0].pageX - slider.touch.start.x;\r\n                    value = slider.touch.originalPos.left + change;\r\n                    // if vertical, drag along y axis\r\n                } else {\r\n                    change = touchPoints[0].pageY - slider.touch.start.y;\r\n                    value = slider.touch.originalPos.top + change;\r\n                }\r\n                setPositionProperty(value, 'reset', 0);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Event handler for \"touchend\"\r\n         *\r\n         * @param e (event)\r\n         *  - DOM event object\r\n         */\r\n        var onTouchEnd = function (e) {\r\n            slider.viewport.unbind('touchmove MSPointerMove pointermove', onTouchMove);\r\n            //enable slider controls as soon as user stops interacing with slides\r\n            slider.controls.el.removeClass('disabled');\r\n            var orig = e.originalEvent,\r\n                touchPoints = (typeof orig.changedTouches !== 'undefined') ? orig.changedTouches : [orig],\r\n                value = 0,\r\n                distance = 0;\r\n            // record end x, y positions\r\n            slider.touch.end.x = touchPoints[0].pageX;\r\n            slider.touch.end.y = touchPoints[0].pageY;\r\n            // if fade mode, check if absolute x distance clears the threshold\r\n            if (slider.settings.mode === 'fade') {\r\n                distance = Math.abs(slider.touch.start.x - slider.touch.end.x);\r\n                if (distance >= slider.settings.swipeThreshold) {\r\n                    if (slider.touch.start.x > slider.touch.end.x) {\r\n                        el.goToNextSlide();\r\n                    } else {\r\n                        el.goToPrevSlide();\r\n                    }\r\n                    el.stopAuto();\r\n                }\r\n                // not fade mode\r\n            } else {\r\n                // calculate distance and el's animate property\r\n                if (slider.settings.mode === 'horizontal') {\r\n                    distance = slider.touch.end.x - slider.touch.start.x;\r\n                    value = slider.touch.originalPos.left;\r\n                } else {\r\n                    distance = slider.touch.end.y - slider.touch.start.y;\r\n                    value = slider.touch.originalPos.top;\r\n                }\r\n                // if not infinite loop and first / last slide, do not attempt a slide transition\r\n                if (!slider.settings.infiniteLoop && ((slider.active.index === 0 && distance > 0) || (slider.active.last && distance < 0))) {\r\n                    setPositionProperty(value, 'reset', 200);\r\n                } else {\r\n                    // check if distance clears threshold\r\n                    if (Math.abs(distance) >= slider.settings.swipeThreshold) {\r\n                        if (distance < 0) {\r\n                            el.goToNextSlide();\r\n                        } else {\r\n                            el.goToPrevSlide();\r\n                        }\r\n                        el.stopAuto();\r\n                    } else {\r\n                        // el.animate(property, 200);\r\n                        setPositionProperty(value, 'reset', 200);\r\n                    }\r\n                }\r\n            }\r\n            slider.viewport.unbind('touchend MSPointerUp pointerup', onTouchEnd);\r\n            if (slider.viewport.get(0).releasePointerCapture) {\r\n                slider.viewport.get(0).releasePointerCapture(slider.pointerId);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Window resize event callback\r\n         */\r\n        var resizeWindow = function (e) {\r\n            // don't do anything if slider isn't initialized.\r\n            if (!slider.initialized) {\r\n                return;\r\n            }\r\n            // Delay if slider working.\r\n            if (slider.working) {\r\n                window.setTimeout(resizeWindow, 10);\r\n            } else {\r\n                // get the new window dimens (again, thank you IE)\r\n                var windowWidthNew = $(window).width(),\r\n                    windowHeightNew = $(window).height();\r\n                // make sure that it is a true window resize\r\n                // *we must check this because our dinosaur friend IE fires a window resize event when certain DOM elements\r\n                // are resized. Can you just die already?*\r\n                if (windowWidth !== windowWidthNew || windowHeight !== windowHeightNew) {\r\n                    // set the new window dimens\r\n                    windowWidth = windowWidthNew;\r\n                    windowHeight = windowHeightNew;\r\n                    // update all dynamic elements\r\n                    el.redrawSlider();\r\n                    // Call user resize handler\r\n                    slider.settings.onSliderResize.call(el, slider.active.index);\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Adds an aria-hidden=true attribute to each element\r\n         *\r\n         * @param startVisibleIndex (int)\r\n         *  - the first visible element's index\r\n         */\r\n        var applyAriaHiddenAttributes = function (startVisibleIndex) {\r\n            var numberOfSlidesShowing = getNumberSlidesShowing();\r\n            // only apply attributes if the setting is enabled and not in ticker mode\r\n            if (slider.settings.ariaHidden && !slider.settings.ticker) {\r\n                // add aria-hidden=true to all elements\r\n                slider.children.attr('aria-hidden', 'true');\r\n                // get the visible elements and change to aria-hidden=false\r\n                slider.children.slice(startVisibleIndex, startVisibleIndex + numberOfSlidesShowing).attr('aria-hidden', 'false');\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Returns index according to present page range\r\n         *\r\n         * @param slideOndex (int)\r\n         *  - the desired slide index\r\n         */\r\n        var setSlideIndex = function (slideIndex) {\r\n            if (slideIndex < 0) {\r\n                if (slider.settings.infiniteLoop) {\r\n                    return getPagerQty() - 1;\r\n                } else {\r\n                    //we don't go to undefined slides\r\n                    return slider.active.index;\r\n                }\r\n                // if slideIndex is greater than children length, set active index to 0 (this happens during infinite loop)\r\n            } else if (slideIndex >= getPagerQty()) {\r\n                if (slider.settings.infiniteLoop) {\r\n                    return 0;\r\n                } else {\r\n                    //we don't move to undefined pages\r\n                    return slider.active.index;\r\n                }\r\n                // set active index to requested slide\r\n            } else {\r\n                return slideIndex;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * ===================================================================================\r\n         * = PUBLIC FUNCTIONS\r\n         * ===================================================================================\r\n         */\r\n\r\n        /**\r\n         * Performs slide transition to the specified slide\r\n         *\r\n         * @param slideIndex (int)\r\n         *  - the destination slide's index (zero-based)\r\n         *\r\n         * @param direction (string)\r\n         *  - INTERNAL USE ONLY - the direction of travel (\"prev\" / \"next\")\r\n         */\r\n        el.goToSlide = function (slideIndex, direction) {\r\n            // onSlideBefore, onSlideNext, onSlidePrev callbacks\r\n            // Allow transition canceling based on returned value\r\n            var performTransition = true,\r\n                moveBy = 0,\r\n                position = {left: 0, top: 0},\r\n                lastChild = null,\r\n                lastShowingIndex, eq, value, requestEl;\r\n            // store the old index\r\n            slider.oldIndex = slider.active.index;\r\n            //set new index\r\n            slider.active.index = setSlideIndex(slideIndex);\r\n\r\n            // if plugin is currently in motion, ignore request\r\n            if (slider.working || slider.active.index === slider.oldIndex) {\r\n                return;\r\n            }\r\n            // declare that plugin is in motion\r\n            slider.working = true;\r\n\r\n            performTransition = slider.settings.onSlideBefore.call(el, slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index);\r\n\r\n            // If transitions canceled, reset and return\r\n            if (typeof (performTransition) !== 'undefined' && !performTransition) {\r\n                slider.active.index = slider.oldIndex; // restore old index\r\n                slider.working = false; // is not in motion\r\n                return;\r\n            }\r\n\r\n            if (direction === 'next') {\r\n                // Prevent canceling in future functions or lack there-of from negating previous commands to cancel\r\n                if (!slider.settings.onSlideNext.call(el, slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index)) {\r\n                    performTransition = false;\r\n                }\r\n            } else if (direction === 'prev') {\r\n                // Prevent canceling in future functions or lack there-of from negating previous commands to cancel\r\n                if (!slider.settings.onSlidePrev.call(el, slider.children.eq(slider.active.index), slider.oldIndex, slider.active.index)) {\r\n                    performTransition = false;\r\n                }\r\n            }\r\n\r\n            // check if last slide\r\n            slider.active.last = slider.active.index >= getPagerQty() - 1;\r\n            // update the pager with active class\r\n            if (slider.settings.pager || slider.settings.pagerCustom) {\r\n                updatePagerActive(slider.active.index);\r\n            }\r\n            // // check for direction control update\r\n            if (slider.settings.controls) {\r\n                updateDirectionControls();\r\n            }\r\n            // if slider is set to mode: \"fade\"\r\n            if (slider.settings.mode === 'fade') {\r\n                // if adaptiveHeight is true and next height is different from current height, animate to the new height\r\n                if (slider.settings.adaptiveHeight && slider.viewport.height() !== getViewportHeight()) {\r\n                    slider.viewport.animate({height: getViewportHeight()}, slider.settings.adaptiveHeightSpeed);\r\n                }\r\n                // fade out the visible child and reset its z-index value\r\n                slider.children.filter(':visible').fadeOut(slider.settings.speed).css({zIndex: 0});\r\n                // fade in the newly requested slide\r\n                slider.children.eq(slider.active.index).css('zIndex', slider.settings.slideZIndex + 1).fadeIn(slider.settings.speed, function () {\r\n                    $(this).css('zIndex', slider.settings.slideZIndex);\r\n                    updateAfterSlideTransition();\r\n                });\r\n                // slider mode is not \"fade\"\r\n            } else {\r\n                // if adaptiveHeight is true and next height is different from current height, animate to the new height\r\n                if (slider.settings.adaptiveHeight && slider.viewport.height() !== getViewportHeight()) {\r\n                    slider.viewport.animate({height: getViewportHeight()}, slider.settings.adaptiveHeightSpeed);\r\n                }\r\n                // if carousel and not infinite loop\r\n                if (!slider.settings.infiniteLoop && slider.carousel && slider.active.last) {\r\n                    if (slider.settings.mode === 'horizontal') {\r\n                        // get the last child position\r\n                        lastChild = slider.children.eq(slider.children.length - 1);\r\n                        position = lastChild.position();\r\n                        // calculate the position of the last slide\r\n                        moveBy = slider.viewport.width() - lastChild.outerWidth();\r\n                    } else {\r\n                        // get last showing index position\r\n                        lastShowingIndex = slider.children.length - slider.settings.minSlides;\r\n                        position = slider.children.eq(lastShowingIndex).position();\r\n                    }\r\n                    // horizontal carousel, going previous while on first slide (infiniteLoop mode)\r\n                } else if (slider.carousel && slider.active.last && direction === 'prev') {\r\n                    // get the last child position\r\n                    eq = slider.settings.moveSlides === 1 ? slider.settings.maxSlides - getMoveBy() : ((getPagerQty() - 1) * getMoveBy()) - (slider.children.length - slider.settings.maxSlides);\r\n                    lastChild = el.children('.bx-clone').eq(eq);\r\n                    position = lastChild.position();\r\n                    // if infinite loop and \"Next\" is clicked on the last slide\r\n                } else if (direction === 'next' && slider.active.index === 0) {\r\n                    // get the last clone position\r\n                    position = el.find('> .bx-clone').eq(slider.settings.maxSlides).position();\r\n                    slider.active.last = false;\r\n                    // normal non-zero requests\r\n                } else if (slideIndex >= 0) {\r\n                    //parseInt is applied to allow floats for slides/page\r\n                    requestEl = slideIndex * parseInt(getMoveBy());\r\n                    position = slider.children.eq(requestEl).position();\r\n                }\r\n\r\n                /* If the position doesn't exist\r\n                 * (e.g. if you destroy the slider on a next click),\r\n                 * it doesn't throw an error.\r\n                 */\r\n                if (typeof (position) !== 'undefined') {\r\n                    value = slider.settings.mode === 'horizontal' ? -(position.left - moveBy) : -position.top;\r\n                    // plugin values to be animated\r\n                    setPositionProperty(value, 'slide', slider.settings.speed);\r\n                } else {\r\n                    slider.working = false;\r\n                }\r\n            }\r\n            if (slider.settings.ariaHidden) {\r\n                applyAriaHiddenAttributes(slider.active.index * getMoveBy());\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Transitions to the next slide in the show\r\n         */\r\n        el.goToNextSlide = function () {\r\n            // if infiniteLoop is false and last page is showing, disregard call\r\n            if (!slider.settings.infiniteLoop && slider.active.last) {\r\n                return;\r\n            }\r\n            var pagerIndex = parseInt(slider.active.index) + 1;\r\n            el.goToSlide(pagerIndex, 'next');\r\n        };\r\n\r\n        /**\r\n         * Transitions to the prev slide in the show\r\n         */\r\n        el.goToPrevSlide = function () {\r\n            // if infiniteLoop is false and last page is showing, disregard call\r\n            if (!slider.settings.infiniteLoop && slider.active.index === 0) {\r\n                return;\r\n            }\r\n            var pagerIndex = parseInt(slider.active.index) - 1;\r\n            el.goToSlide(pagerIndex, 'prev');\r\n        };\r\n\r\n        /**\r\n         * Starts the auto show\r\n         *\r\n         * @param preventControlUpdate (boolean)\r\n         *  - if true, auto controls state will not be updated\r\n         */\r\n        el.startAuto = function (preventControlUpdate) {\r\n            // if an interval already exists, disregard call\r\n            if (slider.interval) {\r\n                return;\r\n            }\r\n            // create an interval\r\n            slider.interval = setInterval(function () {\r\n                if (slider.settings.autoDirection === 'next') {\r\n                    el.goToNextSlide();\r\n                } else {\r\n                    el.goToPrevSlide();\r\n                }\r\n            }, slider.settings.pause);\r\n            // if auto controls are displayed and preventControlUpdate is not true\r\n            if (slider.settings.autoControls && preventControlUpdate !== true) {\r\n                updateAutoControls('stop');\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Stops the auto show\r\n         *\r\n         * @param preventControlUpdate (boolean)\r\n         *  - if true, auto controls state will not be updated\r\n         */\r\n        el.stopAuto = function (preventControlUpdate) {\r\n            // if no interval exists, disregard call\r\n            if (!slider.interval) {\r\n                return;\r\n            }\r\n            // clear the interval\r\n            clearInterval(slider.interval);\r\n            slider.interval = null;\r\n            // if auto controls are displayed and preventControlUpdate is not true\r\n            if (slider.settings.autoControls && preventControlUpdate !== true) {\r\n                updateAutoControls('start');\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Returns current slide index (zero-based)\r\n         */\r\n        el.getCurrentSlide = function () {\r\n            return slider.active.index;\r\n        };\r\n\r\n        /**\r\n         * Returns current slide element\r\n         */\r\n        el.getCurrentSlideElement = function () {\r\n            return slider.children.eq(slider.active.index);\r\n        };\r\n\r\n        /**\r\n         * Returns a slide element\r\n         * @param index (int)\r\n         *  - The index (zero-based) of the element you want returned.\r\n         */\r\n        el.getSlideElement = function (index) {\r\n            return slider.children.eq(index);\r\n        };\r\n\r\n        /**\r\n         * Returns number of slides in show\r\n         */\r\n        el.getSlideCount = function () {\r\n            return slider.children.length;\r\n        };\r\n\r\n        /**\r\n         * Return slider.working variable\r\n         */\r\n        el.isWorking = function () {\r\n            return slider.working;\r\n        };\r\n\r\n        /**\r\n         * Update all dynamic slider elements\r\n         */\r\n        el.redrawSlider = function () {\r\n            // resize all children in ratio to new screen size\r\n            slider.children.add(el.find('.bx-clone')).outerWidth(getSlideWidth());\r\n            // adjust the height\r\n            slider.viewport.css('height', getViewportHeight());\r\n            // update the slide position\r\n            if (!slider.settings.ticker) {\r\n                setSlidePosition();\r\n            }\r\n            // if active.last was true before the screen resize, we want\r\n            // to keep it last no matter what screen size we end on\r\n            if (slider.active.last) {\r\n                slider.active.index = getPagerQty() - 1;\r\n            }\r\n            // if the active index (page) no longer exists due to the resize, simply set the index as last\r\n            if (slider.active.index >= getPagerQty()) {\r\n                slider.active.last = true;\r\n            }\r\n            // if a pager is being displayed and a custom pager is not being used, update it\r\n            if (slider.settings.pager && !slider.settings.pagerCustom) {\r\n                populatePager();\r\n                updatePagerActive(slider.active.index);\r\n            }\r\n            if (slider.settings.ariaHidden) {\r\n                applyAriaHiddenAttributes(slider.active.index * getMoveBy());\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Destroy the current instance of the slider (revert everything back to original state)\r\n         */\r\n        el.destroySlider = function () {\r\n            // don't do anything if slider has already been destroyed\r\n            if (!slider.initialized) {\r\n                return;\r\n            }\r\n            slider.initialized = false;\r\n            $('.bx-clone', this).remove();\r\n            slider.children.each(function () {\r\n                if ($(this).data('origStyle') !== undefined) {\r\n                    $(this).attr('style', $(this).data('origStyle'));\r\n                } else {\r\n                    $(this).removeAttr('style');\r\n                }\r\n            });\r\n            if ($(this).data('origStyle') !== undefined) {\r\n                this.attr('style', $(this).data('origStyle'));\r\n            } else {\r\n                $(this).removeAttr('style');\r\n            }\r\n            $(this).unwrap().unwrap();\r\n            if (slider.controls.el) {\r\n                slider.controls.el.remove();\r\n            }\r\n            if (slider.controls.next) {\r\n                slider.controls.next.remove();\r\n            }\r\n            if (slider.controls.prev) {\r\n                slider.controls.prev.remove();\r\n            }\r\n            if (slider.pagerEl && slider.settings.controls && !slider.settings.pagerCustom) {\r\n                slider.pagerEl.remove();\r\n            }\r\n            $('.bx-caption', this).remove();\r\n            if (slider.controls.autoEl) {\r\n                slider.controls.autoEl.remove();\r\n            }\r\n            clearInterval(slider.interval);\r\n            if (slider.settings.responsive) {\r\n                $(window).unbind('resize', resizeWindow);\r\n            }\r\n            if (slider.settings.keyboardEnabled) {\r\n                $(document).unbind('keydown', keyPress);\r\n            }\r\n            //remove self reference in data\r\n            $(this).removeData('bxSlider');\r\n        };\r\n\r\n        /**\r\n         * Reload the slider (revert all DOM changes, and re-initialize)\r\n         */\r\n        el.reloadSlider = function (settings) {\r\n            if (settings !== undefined) {\r\n                options = settings;\r\n            }\r\n            el.destroySlider();\r\n            init();\r\n            //store reference to self in order to access public functions later\r\n            $(el).data('bxSlider', this);\r\n        };\r\n\r\n        init();\r\n\r\n        $(el).data('bxSlider', this);\r\n\r\n        // returns the current jQuery object\r\n        return this;\r\n    };\r\n\r\n})(jQuery);\r\n"]}